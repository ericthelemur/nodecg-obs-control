{"mappings":"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","sources":["src/extension/index.extension.ts","src/extension/utils.ts","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","src/extension/obs.ts","node_modules/@swc/helpers/esm/_object_spread.js","node_modules/@swc/helpers/esm/_define_property.js","src/common/listeners.ts"],"sourcesContent":["import type NodeCG from '@nodecg/types';\nimport { storeNodeCG } from './utils';\n\nmodule.exports = async function (nodecg: NodeCG.ServerAPI) {\n\tstoreNodeCG(nodecg);\n\tconst obs = require(\"./obs\");\n\tconst obsu = new obs.OBSUtility(nodecg);\n\n\treturn { obs: obsu }\n};\n","import type NodeCG from '@nodecg/types';\nimport type { Configschema } from '../types/schemas';\n\nlet nodecg: NodeCG.ServerAPI<Configschema>;\n\nexport function storeNodeCG(ncg: NodeCG.ServerAPI<Configschema>) {\n    nodecg = ncg;\n}\n\nexport function getNodeCG(): NodeCG.ServerAPI<Configschema> {\n    return nodecg;\n}\n\n\nexport function prefixName(prefix: string | undefined, name: string) {\n    return prefix ? `${prefix}:${name}` : name;\n}\n\nexport function Replicant<T>(name: string, args: NodeCG.Replicant.OptionsNoDefault = {}) {\n    return nodecg.Replicant<T>(name, args) as unknown as NodeCG.ServerReplicantWithSchemaDefault<T>;\n}\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","import { Configschema, PreviewScene, ProgramScene, SceneList, Namespaces, ObsSource, ObsStatus, Login } from \"types/schemas\";\nimport { Replicant, prefixName } from \"./utils\";\nimport OBSWebSocket, { OBSRequestTypes } from 'obs-websocket-js';\nimport NodeCG from \"@nodecg/types\";\nimport * as path from \"path\";\nimport getCurrentLine from 'get-current-line'\n\nimport { listenTo, sendTo } from \"../common/listeners\";\nimport { ListenerTypes } from \"common/listenerTypes\";\n\n\nfunction buildSchemaPath(schemaName: string) {\n    return path.resolve(__dirname, '../../schemas', `${encodeURIComponent(schemaName)}.json`);\n}\n\nexport function NamespaceReplicant<T>(namespace: string | undefined, name: string, args: NodeCG.Replicant.OptionsNoDefault = {}) {\n    return Replicant<T>(prefixName(namespace, name), { schemaPath: buildSchemaPath(name), ...args });\n}\n\ntype PreTransitionProps = ListenerTypes[\"transition\"];\nexport interface Hooks {\n    preTransition(obs: OBSUtility, opts: PreTransitionProps):\n        PreTransitionProps | void | Promise<PreTransitionProps> | Promise<void>\n}\n\nconst usedNamespaces = new Set();\n\nexport class OBSUtility extends OBSWebSocket {\n    nodecg: NodeCG.ServerAPI<Configschema>;\n    namespace: string;\n    hooks: Partial<Hooks>;\n    replicants: {\n        login: NodeCG.ServerReplicantWithSchemaDefault<Login>;\n        programScene: NodeCG.ServerReplicantWithSchemaDefault<ProgramScene>;\n        previewScene: NodeCG.ServerReplicantWithSchemaDefault<PreviewScene>;\n        sceneList: NodeCG.ServerReplicantWithSchemaDefault<SceneList>;\n        obsStatus: NodeCG.ServerReplicantWithSchemaDefault<ObsStatus>;\n    };\n    log: NodeCG.Logger;\n\n    private _ignoreConnectionClosedEvents = false;\n    private _reconnectInterval: NodeJS.Timeout | null = null;\n\n    constructor(nodecg: NodeCG.ServerAPI<Configschema>, opts: { namespace?: string; hooks?: Partial<Hooks> } = {}) {\n        super();\n        this.nodecg = nodecg;\n        let namespace = opts.namespace || '';\n\n        if (usedNamespaces.has(namespace)) {\n            throw new Error(`Namespace \"${namespace}\" has already been used. Please choose a different namespace.`);\n        }\n\n        usedNamespaces.add(namespace);\n        this.namespace = namespace;\n        const namespacesReplicant = Replicant<Namespaces>('namespaces', { persistent: false });\n        namespacesReplicant.value.push(namespace);\n\n        this.replicants = {\n            login: NamespaceReplicant<Login>(namespace, \"login\"),\n            programScene: NamespaceReplicant<ProgramScene>(namespace, \"programScene\", { persistent: false }),\n            previewScene: NamespaceReplicant<PreviewScene>(namespace, \"previewScene\", { persistent: false }),\n            sceneList: NamespaceReplicant<SceneList>(namespace, \"sceneList\", { persistent: false }),\n            obsStatus: NamespaceReplicant<ObsStatus>(namespace, \"obsStatus\")\n        };\n        this.log = new nodecg.Logger(prefixName(nodecg.bundleName, namespace));\n        this.hooks = opts.hooks || {};\n\n        this._connectionListeners();\n        this._replicantListeners();\n        this._transitionListeners();\n        this._interactionListeners();\n    }\n\n\n    private _connectionListeners() {\n        this.replicants.obsStatus.once('change', newVal => {\n            // If we were connected last time, try connecting again now.\n            if (newVal && (newVal.connection === 'connected' || newVal.connection === 'connecting')) {\n                this.replicants.obsStatus.value.connection = 'connecting';\n                this._connectToOBS().then().catch(() => {\n                    this.replicants.obsStatus.value.connection = 'error';\n                });\n            }\n        });\n\n        this.nodecg.listenFor(\"DEBUG:callOBS\", async (data, ack) => {\n            if (!data.name || !data.args) return this.ackError(ack, \"No name or args\", undefined);\n            this.log.info(\"Called\", data.name, \"with\", data.args);\n            try {\n                const res = await this.call(data.name, data.args);\n                if (ack && !ack.handled) ack(undefined, res);\n                this.log.info(\"Result:\", res);\n            } catch (err) {\n                this.ackError(ack, `Error calling ${data.name}`, err);\n            }\n        })\n\n        listenTo(\"connect\", (params, ack) => {\n            this._ignoreConnectionClosedEvents = false;\n            clearInterval(this._reconnectInterval!);\n            this._reconnectInterval = null;\n\n            this.replicants.login.value = { ...this.replicants.login.value, ...params };\n\n            this._connectToOBS().then(() => {\n                if (ack && !ack.handled) ack();\n            }).catch(err => {\n                this.replicants.obsStatus.value.connection = 'error';\n                this.ackError(ack, `Failed to connect`, err);\n            });\n        }, this.namespace);\n\n        listenTo(\"disconnect\", (_, ack) => {\n            this._ignoreConnectionClosedEvents = true;\n            clearInterval(this._reconnectInterval!);\n            this._reconnectInterval = null;\n\n            this.replicants.obsStatus.value.connection = 'disconnected';\n            this.disconnect();\n            this.log.info('Operator-requested disconnect.');\n\n            if (ack && !ack.handled) ack();\n        }, this.namespace);\n\n        this.on(\"ConnectionClosed\", this._reconnectToOBS);\n\n        (this as any).on(\"error\", (e: Error) => {\n            this.ackError(undefined, \"\", e);\n            this._reconnectToOBS();\n        });\n\n        setInterval(() => {\n            if (this.replicants.obsStatus.value.connection === 'connected' && this.socket?.readyState !== this.socket?.OPEN) {\n                this.log.warn('Thought we were connected, but the automatic poll detected we were not. Correcting.');\n                clearInterval(this._reconnectInterval!);\n                this._reconnectInterval = null;\n                this._reconnectToOBS();\n            }\n        }, 1000);\n    }\n\n\n    private _connectToOBS() {\n        const login = this.replicants.login.value;\n        const status = this.replicants.obsStatus.value;\n        if (status.connection === 'connected') {\n            throw new Error('Attempted to connect to OBS while already connected!');\n        }\n\n        status.connection = 'connecting';\n\n        return this.connect(login.ip, login.password).then(() => {\n            this.log.info('Connected');\n            clearInterval(this._reconnectInterval!);\n            this._reconnectInterval = null;\n            status.connection = 'connected';\n            // this.call(\"SetStudioModeEnabled\", { studioModeEnabled: true });\n            return this._fullUpdate();\n        });\n    }\n\n    private _reconnectToOBS() {\n        if (this._reconnectInterval) return;\n\n        const status = this.replicants.obsStatus.value;\n        if (this._ignoreConnectionClosedEvents) {\n            status.connection = 'disconnected';\n            return;\n        }\n\n        status.connection = 'connecting';\n        this.log.warn('Connection closed, will attempt to reconnect every 5 seconds.');\n        // Retry, ignoring errors\n        this._reconnectInterval = setInterval(() => this._connectToOBS().catch(() => { }), 5000);\n    }\n\n\n    private _replicantListeners() {\n        this.on(\"SceneListChanged\", ({ scenes }) => this._updateSceneList(scenes as { sceneName: string }[]));\n        this.on(\"CurrentPreviewSceneChanged\", (name) => this._updateSceneItems(this.replicants.previewScene, name.sceneName));\n        this.on(\"CurrentProgramSceneChanged\", (name) => this._updateSceneItems(this.replicants.programScene, name.sceneName));\n        // Clear or set preview on studio mode set or unset\n        this.on(\"StudioModeStateChanged\", ({ studioModeEnabled }) => {\n            this.replicants.obsStatus.value.studioMode = studioModeEnabled;\n            if (!studioModeEnabled) this.replicants.previewScene.value = null;\n            else this.call(\"GetCurrentPreviewScene\")\n                .then(({ currentPreviewSceneName }) => this._updateSceneItems(this.replicants.previewScene, currentPreviewSceneName));\n        });\n\n        this.on(\"RecordStateChanged\", ({ outputActive }) => this.replicants.obsStatus.value.recording = outputActive);\n        this.on(\"StreamStateChanged\", ({ outputActive }) => this.replicants.obsStatus.value.streaming = outputActive);\n    }\n\n    private _fullUpdate() {\n        return Promise.all([\n            this._updateScenes().then(\n                (res) => Promise.all([\n                    this._updateSceneItems(this.replicants.previewScene, res.currentPreviewSceneName),\n                    this._updateSceneItems(this.replicants.programScene, res.currentProgramSceneName)\n                ])\n            ).catch(err => this.ackError(undefined, 'Error updating scenes list:', err)),\n            this._updateStatus()\n        ]);\n    }\n\n    private _updateScenes() {\n        return this.call('GetSceneList').then(res => {\n            // Response type is not detailed enough, so assert type here\n            this._updateSceneList(res.scenes as { sceneName: string }[]);\n            return res;\n        })\n    }\n\n    private _updateSceneList(scenes: { sceneName: string }[]) {\n        this.replicants.sceneList.value = scenes.map(s => s.sceneName);\n        return scenes;\n    }\n\n    private _updateSceneItems(replicant: NodeCG.ServerReplicantWithSchemaDefault<PreviewScene>, sceneName: string) {\n        if (!sceneName) replicant.value = null;\n        else {\n            this.call(\"GetSceneItemList\", { sceneName: sceneName }).then(items => {\n                replicant.value = {\n                    name: sceneName,\n                    sources: items.sceneItems as unknown as ObsSource[]\n                }\n                return items;\n            }).catch(err => this.ackError(undefined, `Error updating ${replicant.name} scene:`, err));\n        }\n    }\n\n    private _updateStatus() {\n        return Promise.all([\n            this._tryCallOBS('GetStudioModeEnabled').then(({ studioModeEnabled }) => this.replicants.obsStatus.value.studioMode = studioModeEnabled),\n            this._tryCallOBS('GetRecordStatus').then(({ outputActive }) => this.replicants.obsStatus.value.recording = outputActive),\n            this._tryCallOBS('GetStreamStatus').then(({ outputActive }) => this.replicants.obsStatus.value.streaming = outputActive)\n        ]);\n    }\n\n\n    private async _tryCallOBS<Type extends keyof OBSRequestTypes>(requestType: Type, requestData?: OBSRequestTypes[Type], ack?: NodeCG.Acknowledgement, errMsg?: string, catchF?: (e: any) => {}) {\n        return this.call(requestType, requestData).then((res) => {\n            if (ack && !ack.handled) ack();\n            return res;\n        }).catch((err) => {\n            if (catchF) catchF(err);\n            this.ackError(ack, errMsg ? errMsg : `Error calling ${requestType}`, err);\n            throw err;\n        })\n    }\n\n    private ackError(ack: NodeCG.Acknowledgement | undefined, errmsg: string, err: any) {\n        const line = getCurrentLine({ frames: 2 });\n        this.log.error(`[${line.file}:${line.line}:${line.char}]`, errmsg, err);\n        if (ack && !ack.handled) ack(err);\n    }\n\n    private _transitionListeners() {\n        listenTo(\"transition\", async (args, ack) => {\n            args = args ? args : {};\n            // Mark that we're starting to transition. Resets to false after SwitchScenes.\n            this.replicants.obsStatus.value.transitioning = true;\n\n            // Call hook\n            if (this.hooks.preTransition !== undefined) {\n                const res = await this.hooks.preTransition(this, args);\n                if (res) args = res;\n            }\n\n            // Set transition and duration\n            if (args.transitionName) this._tryCallOBS(\"SetCurrentSceneTransition\",\n                { \"transitionName\": args.transitionName }, ack, \"Error setting transition\"\n            );\n\n            if (args.transitionDuration) this._tryCallOBS(\"SetCurrentSceneTransitionDuration\",\n                { transitionDuration: args.transitionDuration }, ack, \"Error setting transiton duration\"\n            );\n\n            // Trigger transition, needs different calls outside studio mode\n            if (this.replicants.obsStatus.value.studioMode) {\n                if (args.sceneName) {\n                    this._tryCallOBS('SetCurrentPreviewScene', { 'sceneName': args.sceneName },\n                        ack, 'Error setting preview scene for transition:')\n                }\n\n                this._tryCallOBS(\"TriggerStudioModeTransition\", undefined, ack, \"Error transitioning\",\n                    (e) => this.replicants.obsStatus.value.transitioning = false);\n            } else {\n                if (!args.sceneName) this.ackError(ack, \"Error: Cannot transition\", undefined);\n                else this._tryCallOBS(\"SetCurrentProgramScene\", { 'sceneName': args.sceneName }, ack, \"Error transitioning\",\n                    (e) => this.replicants.obsStatus.value.transitioning = false);\n            }\n        }, this.namespace);\n\n        listenTo(\"preview\", async (args, ack) => {\n            if (!this.replicants.obsStatus.value.studioMode) this.ackError(ack, \"Cannot preview when not in studio mode\", undefined);\n\n            this._tryCallOBS('SetCurrentPreviewScene', { 'sceneName': args.sceneName },\n                ack, 'Error setting preview scene for transition:')\n        }, this.namespace);\n\n\n        this.on(\"SceneTransitionStarted\", ({ transitionName }) => {\n            const pre = this.replicants.previewScene.value;\n            const pro = this.replicants.programScene.value;\n\n            this.replicants.obsStatus.value.transitioning = true;\n            sendTo(\"transitioning\", {\n                transitionName: transitionName,\n                fromScene: pro ? pro.name : undefined,\n                toScene: pre ? pre.name : undefined\n            })\n        })\n\n        this.on(\"SceneTransitionEnded\", () => this.replicants.obsStatus.value.transitioning = false);\n        // SceneTransitionEnded doesn't trigger if user cancelled transition, so cya\n        this.on(\"CurrentProgramSceneChanged\", () => {\n            if (this.replicants.obsStatus.value.transitioning) {\n                this.replicants.obsStatus.value.transitioning = false;\n            }\n        })\n    }\n\n    private _interactionListeners() {\n        listenTo(\"moveItem\", ({ sceneName, sceneItemId, transform }) => {\n            this.call(\"SetSceneItemTransform\", { sceneName: sceneName, sceneItemId: sceneItemId, sceneItemTransform: transform as any });\n        })\n    }\n}","import { _define_property } from \"./_define_property.js\";\n\nexport function _object_spread(target) {\n    for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(\n                Object.getOwnPropertySymbols(source).filter(function(sym) {\n                    return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n                })\n            );\n        }\n\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n\n    return target;\n}\nexport { _object_spread as _ };\n","export function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n","import NodeCG from \"@nodecg/types\";\nimport { ListenerTypes } from \"./listenerTypes\";\nimport { getNodeCG } from \"../extension/utils\";\nimport { NodeCGAPIClient } from \"@nodecg/types/client/api/api.client\";\n\nvar ncg: NodeCGAPIClient | NodeCG.ServerAPI;\ndeclare var nodecg: NodeCGAPIClient;\ntry {\n    ncg = nodecg;\n} catch {\n    ncg = getNodeCG();\n}\n\ntype Listener<T> = (data: T, ack: NodeCG.Acknowledgement | undefined) => void;\n\nexport function sendError(ack: NodeCG.Acknowledgement | undefined, msg: string) {\n    if (ack && !ack.handled) ack(new Error(msg));\n}\n\nexport function sendSuccess<T>(ack: NodeCG.Acknowledgement | undefined, value: T) {\n    if (ack && !ack.handled) ack(null, value);\n}\n\nexport function listenTo<T extends keyof ListenerTypes>(name: T, listener: Listener<ListenerTypes[T]>, prefix: string | undefined = undefined) {\n    const prename = prefix ? `${prefix}:${name}` : name;\n    ncg.listenFor(prename, (data, ack) => {\n        console.debug(\"Calling\", prename, \"with\", data);\n        listener(data, ack);\n    })\n}\n\n\nexport function sendToF<T extends keyof ListenerTypes>(name: T, data: ListenerTypes[T], prefix: string | undefined = undefined) {\n    const prename = prefix ? `${prefix}:${name}` : name;\n    return () => {\n        console.debug(\"Sending\", prename, \"with\", data);\n        return ncg.sendMessage(prename, data);\n    }\n}\n\nexport function sendTo<T extends keyof ListenerTypes>(name: T, data: ListenerTypes[T], prefix: string | undefined = undefined) {\n    return sendToF(name, data, prefix)();\n}\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}